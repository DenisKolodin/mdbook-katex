name: deploy

on:
  push:
    tags:
      - 'v*.*.*'

jobs:

  windows-binary:

    runs-on: windows-latest

    env:
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true

    steps:
    - uses: actions/checkout@v3

    - name: Install stable
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        target: x86_64-pc-windows-msvc
        override: true

    - uses: Swatinem/rust-cache@v2

    - name: Build mdbook-katex
      run: |
        cargo build --release

    - name: Get the version
      shell: bash
      id: tagName
      run: |
        VERSION=$(cargo pkgid | cut -d# -f2 | cut -d: -f2)
        echo "::set-output name=version::$VERSION"

    - name: Create zip
      run: |
        $ZIP_PREFIX = "mdbook-katex-v${{ steps.tagName.outputs.version }}"
        7z a "$ZIP_PREFIX-x86_64-pc-windows-msvc.zip" `
             "./target/release/mdbook-katex.exe"

    - name: Upload binary artifact
      uses: actions/upload-artifact@v2
      with:
        path: mdbook-katex-v${{ steps.tagName.outputs.version }}-x86_64-pc-windows-msvc.zip

  gnu-linux-binary:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Install x86_64-unknown-linux-gnu target
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        target: x86_64-unknown-linux-gnu
        override: true

    - uses: Swatinem/rust-cache@v2

    - name: Build mbdook-katex
      run: |
        cargo build --release

    - name: Get the version
      id: tagName
      run: |
        VERSION=$(cargo pkgid | cut -d# -f2 | cut -d: -f2)
        echo "::set-output name=version::$VERSION"

    - name: Create tar
      run: |
        TAR_FILE=mdbook-katex-v${{ steps.tagName.outputs.version }}
        tar -czvf $TAR_FILE-x86_64-unknown-linux-gnu.tar.gz \
                  target/release/mdbook-katex

    - name: Upload binary artifact
      uses: actions/upload-artifact@v2
      with:
        path: mdbook-katex-v${{ steps.tagName.outputs.version }}-x86_64-unknown-linux-gnu.tar.gz

  # TODO: musl-linux-binary

  macos-binary:

    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v3

    - name: Install stable
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true

    - uses: Swatinem/rust-cache@v2

    - name: Build mdbook-katex
      run: |
        cargo build --release

    - name: Get the version
      id: tagName
      run: |
        VERSION=$(cargo pkgid | cut -d# -f2 | cut -d: -f2)
        echo "::set-output name=version::$VERSION"

    - name: Create tar
      run: |
        TAR_PREFIX=mdbook-katex-v${{ steps.tagName.outputs.version }}
        tar -czvf $TAR_PREFIX-x86_64-apple-darwin.tar.gz \
                  target/release/mdbook-katex

    - name: Upload binary artifact
      uses: actions/upload-artifact@v2
      with:
        path: mdbook-katex-v${{ steps.tagName.outputs.version }}-x86_64-apple-darwin.tar.gz

  deploy:

    needs: [windows-binary, gnu-linux-binary, macos-binary]

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Download artifacts
      uses: actions/download-artifact@v2
      with:
        name: artifact

    - name: Install Rust stable
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true

    - name: Create Cargo.lock
      run: |
        cargo update

    - name: Get the version
      id: tagName
      run: |
        VERSION=$(cargo pkgid | cut -d# -f2 | cut -d: -f2)
        echo "::set-output name=version::$VERSION"

    - name: Create a release
      uses: softprops/action-gh-release@v1
      with:
        name: v${{ steps.tagName.outputs.version }}
        files: |
          Cargo.lock
          mdbook-katex-v${{ steps.tagName.outputs.version }}-x86_64-apple-darwin.tar.gz
          mdbook-katex-v${{ steps.tagName.outputs.version }}-x86_64-pc-windows-msvc.zip
          mdbook-katex-v${{ steps.tagName.outputs.version }}-x86_64-unknown-linux-gnu.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish:

    runs-on: ubuntu-latest

    steps:
        - uses: actions/checkout@v3
        - uses: actions-rs/toolchain@v1
          with:
              toolchain: stable
              override: true

        - uses: Swatinem/rust-cache@v2

        - uses: katyo/publish-crates@v1
          with:
              registry-token: ${{ secrets.CARGO_CREDENTIALS }}
